// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NickRI/fiatconv/converter/interfaces/presenters (interfaces: Presenter)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entries "github.com/NickRI/fiatconv/converter/domain/entries"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPresenter is a mock of Presenter interface
type MockPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterMockRecorder
}

// MockPresenterMockRecorder is the mock recorder for MockPresenter
type MockPresenterMockRecorder struct {
	mock *MockPresenter
}

// NewMockPresenter creates a new mock instance
func NewMockPresenter(ctrl *gomock.Controller) *MockPresenter {
	mock := &MockPresenter{ctrl: ctrl}
	mock.recorder = &MockPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPresenter) EXPECT() *MockPresenterMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockPresenter) Error(arg0 context.Context, arg1 error) error {
	ret := m.ctrl.Call(m, "Error", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockPresenterMockRecorder) Error(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockPresenter)(nil).Error), arg0, arg1)
}

// Present mocks base method
func (m *MockPresenter) Present(arg0 context.Context, arg1, arg2 entries.CurrencySymbol, arg3, arg4 entries.Amount) error {
	ret := m.ctrl.Call(m, "Present", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Present indicates an expected call of Present
func (mr *MockPresenterMockRecorder) Present(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockPresenter)(nil).Present), arg0, arg1, arg2, arg3, arg4)
}
