// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NickRI/fiatconv/converter/domain/usecases (interfaces: Usecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entries "github.com/NickRI/fiatconv/converter/domain/entries"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Convert mocks base method
func (m *MockUsecase) Convert(arg0 context.Context, arg1, arg2 entries.CurrencySymbol, arg3 entries.Amount) (entries.Amount, error) {
	ret := m.ctrl.Call(m, "Convert", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entries.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockUsecaseMockRecorder) Convert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockUsecase)(nil).Convert), arg0, arg1, arg2, arg3)
}
